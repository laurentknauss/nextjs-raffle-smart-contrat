[{"/home/laurent/Documents/foundry/nextjs/pages/_app.js":"1","/home/laurent/Documents/foundry/nextjs/pages/api/hello.js":"2","/home/laurent/Documents/foundry/nextjs/pages/index.js":"3","/home/laurent/Documents/foundry/nextjs/components/Header.js":"4","/home/laurent/Documents/foundry/nextjs/components/LotteryEntrance.js":"5","/home/laurent/Documents/foundry/nextjs/components/ManualHeader.js":"6"},{"size":383,"mtime":1720770386508,"results":"7","hashOfConfig":"8"},{"size":170,"mtime":1720770386508,"results":"9","hashOfConfig":"8"},{"size":1099,"mtime":1720797418395,"results":"10","hashOfConfig":"8"},{"size":953,"mtime":1720870524316,"results":"11","hashOfConfig":"8"},{"size":5980,"mtime":1720870794426,"results":"12","hashOfConfig":"8"},{"size":2637,"mtime":1720770386500,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gyo04i",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"/home/laurent/Documents/foundry/nextjs/pages/_app.js",[],[],"/home/laurent/Documents/foundry/nextjs/pages/api/hello.js",[],[],"/home/laurent/Documents/foundry/nextjs/pages/index.js",[],[],"/home/laurent/Documents/foundry/nextjs/components/Header.js",[],[],"/home/laurent/Documents/foundry/nextjs/components/LotteryEntrance.js",["34"],[],"\nimport Image from 'next/image'; \nimport styles from '../styles/Home.module.css'; \nimport { contractAddresses, abi } from \"../constants\"\n// dont export from moralis when using react\nimport { useMoralis, useWeb3Contract } from \"react-moralis\"\nimport { useEffect, useState } from \"react\"\nimport { useNotification } from \"web3uikit\"\nimport { ethers } from \"ethers\"\n\n\n\nexport default function LotteryEntrance() {\n    const { Moralis, isWeb3Enabled, chainId: chainIdHex } = useMoralis()\n    // These get re-rendered every time due to our connect button!\n    const chainId = parseInt(chainIdHex)\n    // console.log(`ChainId is ${chainId}`)\n    const raffleAddress = chainId in contractAddresses ? contractAddresses[chainId][0] : null\n\n    // State hooks\n    // https://stackoverflow.com/questions/58252454/react-hooks-using-usestate-vs-just-variables\n    const [entranceFee, setEntranceFee] = useState(\"0\")\n    const [numberOfPlayers, setNumberOfPlayers] = useState(\"0\")\n    const [recentWinner, setRecentWinner] = useState(\"0\")\n\n    const dispatch = useNotification()\n\n    const {\n        runContractFunction: enterRaffle,\n        data: enterTxResponse,\n        isLoading,\n        isFetching,\n    } = useWeb3Contract({\n        abi: abi,\n        contractAddress: raffleAddress,\n        functionName: \"enterRaffle\",\n        msgValue: entranceFee,\n        params: {},\n    })\n\n    /* View Functions */\n\n    const { runContractFunction: getEntranceFee } = useWeb3Contract({\n        abi: abi,\n        contractAddress: raffleAddress, // specify the networkId\n        functionName: \"getEntranceFee\",\n        params: {},\n    })\n\n    const { runContractFunction: getPlayersNumber } = useWeb3Contract({\n        abi: abi,\n        contractAddress: raffleAddress,\n        functionName: \"getNumberOfPlayers\",\n        params: {},\n    })\n\n    const { runContractFunction: getRecentWinner } = useWeb3Contract({\n        abi: abi,\n        contractAddress: raffleAddress,\n        functionName: \"getRecentWinner\",\n        params: {},\n    })\n\n    async function updateUIValues() {\n        // Another way we could make a contract call:\n        // const options = { abi, contractAddress: raffleAddress }\n        // const fee = await Moralis.executeFunction({\n        //     functionName: \"getEntranceFee\",\n        //     ...options,\n        // })\n        const entranceFeeFromCall = (await getEntranceFee()).toString()\n        const numPlayersFromCall = (await getPlayersNumber()).toString()\n        const recentWinnerFromCall = await getRecentWinner()\n        setEntranceFee(entranceFeeFromCall)\n        setNumberOfPlayers(numPlayersFromCall)\n        setRecentWinner(recentWinnerFromCall)\n    }\n\n    useEffect(() => {\n        if (isWeb3Enabled) {\n            updateUIValues()\n        }\n    }, [isWeb3Enabled])\n    // no list means it'll update everytime anything changes or happens\n    // empty list means it'll run once after the initial rendering\n    // and dependencies mean it'll run whenever those things in the list change\n\n    // An example filter for listening for events, we will learn more on this next Front end lesson\n    // const filter = {\n    //     address: raffleAddress,\n    //     topics: [\n    //         // the name of the event, parnetheses containing the data type of each event, no spaces\n    //         utils.id(\"RaffleEnter(address)\"),\n    //     ],\n    // }\n\n    const handleNewNotification = () => {\n        dispatch({\n            type: \"info\",\n            message: \"Transaction Complete!\",\n            title: \"Transaction Notification\",\n            position: \"topR\",\n            icon: \"bell\",\n        })\n    }\n\n    const handleSuccess = async (tx) => {\n        try {\n            await tx.wait(1)\n            updateUIValues()\n            handleNewNotification(tx)\n        } catch (error) {\n            console.log(error)\n        }\n    }\n\n    return (\n        <div className=\"flex justify-center items-center min-h-screen\">\n            \n        <div className=\"p-5 text-center\" >\n            <h1 className=\"py-4 px-4 font-bold text-5xl\">\n                Tamper-proof &        \n                 Powered by<br /> \n                 Chainlink VRF & Chainlink Automation\n            </h1>\n\n            {raffleAddress ? (\n                <>\n                    \n                    <button\n                        className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-4 px-8 rounded text-2xl my-4\"\n                        onClick={async () =>\n                            await enterRaffle({\n                                // onComplete:\n                                // onError:\n                                onSuccess: handleSuccess,\n                                onError: (error) => console.log(error),\n                            })\n                        }\n                        disabled={isLoading || isFetching}\n                    >\n                        {isLoading || isFetching ? (\n                            <div className=\"animate-spin spinner-border h-9 w-9 border-b-5 rounded-full\"></div>\n                        ) : (\n                            \"Enter the Raffle ! \"\n                        )}\n                    </button>\n                    \n                    <p className=\"py-4 px-4 font-bold text-3xl\">\n                    Entrance Fee: {ethers.utils.formatUnits(entranceFee, \"ether\")} ETH<br />\n                    <br />\n                    The current number of players is {numberOfPlayers} ! <br />\n                    <br />\n                    The wallet address of our most previous winner was  {`\"${recentWinner}\"`} ! \n                    <br /> \n                    The smart contract for this web3 raffle was deployed on <br />\n                    Avalanche fuji at this address : {`\"0xFD01b2F49118FE7E53bcee970CB001f5f25F8158\"`}\n\n                    </p>\n                    \n                </>\n            ) : (\n                <div>Please connect to a supported chain </div>\n            )}\n        </div>\n        </div>\n    )\n\n}","/home/laurent/Documents/foundry/nextjs/components/ManualHeader.js",["35","36"],[],"// This file is to show what making a connect button looks like behind the scenes!\n\nimport { useEffect } from \"react\"\nimport { useMoralis } from \"react-moralis\"\n\n// Top navbar\nexport default function ManualHeader() {\n    const { enableWeb3, isWeb3Enabled, isWeb3EnableLoading, account, Moralis, deactivateWeb3 } =\n        useMoralis()\n\n    useEffect(() => {\n        if (\n            !isWeb3Enabled &&\n            typeof window !== \"undefined\" &&\n            window.localStorage.getItem(\"connected\")\n        ) {\n            enableWeb3()\n            // enableWeb3({provider: window.localStorage.getItem(\"connected\")}) // add walletconnect\n        }\n    }, [isWeb3Enabled])\n    // no array, run on every render\n    // empty array, run once\n    // dependency array, run when the stuff in it changesan\n\n    useEffect(() => {\n        Moralis.onAccountChanged((newAccount) => {\n            console.log(`Account changed to ${newAccount}`)\n            if (newAccount == null) {\n                window.localStorage.removeItem(\"connected\")\n                deactivateWeb3()\n                console.log(\"Null Account found\")\n            }\n        })\n    }, [])\n\n    return (\n        <nav className=\"p-5 border-b-2\">\n            <ul className=\"\">\n                <li className=\"flex flex-row\">\n                    {account ? (\n                        <div className=\"ml-auto py-2 px-4\">\n                            Connected to {account.slice(0, 6)}...\n                            {account.slice(account.length - 4)}\n                        </div>\n                    ) : (\n                        <button\n                            onClick={async () => {\n                                // await walletModal.connect()\n                                const ret = await enableWeb3()\n                                if (typeof ret !== \"undefined\") {\n                                    // depends on what button they picked\n                                    if (typeof window !== \"undefined\") {\n                                        window.localStorage.setItem(\"connected\", \"injected\")\n                                        // window.localStorage.setItem(\"connected\", \"walletconnect\")\n                                    }\n                                }\n                            }}\n                            disabled={isWeb3EnableLoading}\n                            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded ml-auto\"\n                        >\n                            Connect\n                        </button>\n                    )}\n                </li>\n            </ul>\n        </nav>\n    )\n}\n",{"ruleId":"37","severity":1,"message":"38","line":83,"column":8,"nodeType":"39","endLine":83,"endColumn":23,"suggestions":"40"},{"ruleId":"37","severity":1,"message":"41","line":20,"column":8,"nodeType":"39","endLine":20,"endColumn":23,"suggestions":"42"},{"ruleId":"37","severity":1,"message":"43","line":34,"column":8,"nodeType":"39","endLine":34,"endColumn":10,"suggestions":"44"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateUIValues'. Either include it or remove the dependency array.","ArrayExpression",["45"],"React Hook useEffect has a missing dependency: 'enableWeb3'. Either include it or remove the dependency array.",["46"],"React Hook useEffect has missing dependencies: 'Moralis' and 'deactivateWeb3'. Either include them or remove the dependency array.",["47"],{"desc":"48","fix":"49"},{"desc":"50","fix":"51"},{"desc":"52","fix":"53"},"Update the dependencies array to be: [isWeb3Enabled, updateUIValues]",{"range":"54","text":"55"},"Update the dependencies array to be: [enableWeb3, isWeb3Enabled]",{"range":"56","text":"57"},"Update the dependencies array to be: [Moralis, deactivateWeb3]",{"range":"58","text":"59"},[2764,2779],"[isWeb3Enabled, updateUIValues]",[654,669],"[enableWeb3, isWeb3Enabled]",[1144,1146],"[Moralis, deactivateWeb3]"]